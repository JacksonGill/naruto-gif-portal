{"version":3,"sources":["payPopUp.js","App.js","index.js"],"names":["SystemProgram","web3","programID","PublicKey","idl","metadata","address","PayPopUp","userAddress","toggle","getProvider","useState","inputValue","setInputValue","handleSolTip","a","parsedInput","parseFloat","isNaN","console","log","provider","program","Program","rpc","sendSol","BN","accounts","from","wallet","publicKey","to","systemProgram","programId","className","onChange","e","target","value","onClick","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","network","clusterApiUrl","opts","App","walletAddress","setWalletAddress","gifList","setGifList","payPopUp","setPayPopUp","recievingAddress","setRecievingAddress","checkIfWalletIsConnected","window","solana","isPhantom","connect","onlyIfTrusted","response","toString","alert","error","connectWallet","connection","Connection","Provider","createGifAccount","startStuffOff","user","signers","getGifList","sendGif","addGif","addVote","gifLink","updateGif","handlePopUp","useEffect","addEventListener","event","useCallback","account","fetch","onSubmit","preventDefault","type","placeholder","map","item","index","key","alt","src","votes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e81a7782.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { GiCancel } from 'react-icons/gi'\nimport idl from './idl.json';\n\n// Anchor imports\nimport { PublicKey } from '@solana/web3.js';\nimport { Program, web3, BN } from '@project-serum/anchor';\nconst { SystemProgram } = web3;\n\nconst programID = new PublicKey(idl.metadata.address);\n\nconst PayPopUp = ({ \n    userAddress, \n    toggle,\n    getProvider,\n}) => {\n    const [inputValue, setInputValue] = useState(0.001);\n\n    const handleExit = () => {\n        toggle(null);\n    }\n\n    const handleSolTip = async () => {\n        const parsedInput = parseFloat(inputValue)\n        if (!isNaN(parsedInput) & inputValue > 0) {\n            console.log(`Sending ${inputValue} SOL to ${userAddress}`);\n            try {\n                const provider = getProvider();\n                const program = new Program(idl, programID, provider);\n                 // SOL to lamports\n                await program.rpc.sendSol(new BN(parsedInput * 1000000000), {\n                    accounts: {\n                        from: provider.wallet.publicKey,\n                        to: new PublicKey(userAddress),\n                        systemProgram: SystemProgram.programId,\n                    }\n                })\n                console.log(`ðŸ’°${inputValue} SOL successfully sent to ${userAddress}`);\n            } catch (error) {\n                console.log(\"Error sending SOL tip:\", error);\n            }\n        } else {\n            console.log(\"Only Valid SOL amount can be inputed\");\n        }\n    }\n\n    return (\n        <div className=\"modal\">\n            <div className=\"modal-content\">\n                <p>Send SOL tip to:</p>\n                <p>{userAddress}</p>\n                <div className=\"amount-form\">\n                    <p>Amount:</p>\n                    <input onChange={(e) => setInputValue(e.target.value)} value={inputValue}/>   \n                </div>\n                <button className=\"send-button\" onClick={handleSolTip}><span>Send</span></button>\n                <GiCancel className=\"exit\" onClick={handleExit}>Cancel</GiCancel>\n            </div>\n        </div>\n    )\n}\n\n\nexport default PayPopUp;","import React, { useEffect, useState, useCallback }  from 'react';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Provider, Program, web3 } from '@project-serum/anchor';\n\nimport idl from './idl.json';\nimport kp from './keypair.json';\n\n// React Icons\nimport { IconContext } from 'react-icons/lib';\nimport { FcLike } from 'react-icons/fc';\nimport { FaMoneyBillWave } from 'react-icons/fa';\nimport PayPopUp from './payPopUp';\n\n// SystemProgram is a reference to the Solana runtime\nconst { SystemProgram } = web3;\n// Create a keypair for the account what will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n// Get our program's id from the IDL file\nconst programID = new PublicKey(idl.metadata.address);\n// Set our network to devenet.\nconst network = clusterApiUrl('devnet');\n// Control's how we want to acknowledge when a transaction is \"done\"\nconst opts = { preflightCommitment: \"processed\" }\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  const [payPopUp, setPayPopUp] = useState(false);\n  const [recievingAddress, setRecievingAddress] = useState(null);\n  /*\n   * Holds thie logic for deciding if a Phantom Wallet is connected or not \n  */\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n\n          /*\n          * Connect directly with the user's wallets\n          */\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:', response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /*\n   * Button handler for connecting wallet\n  */ \n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString())\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue === 0) {\n      console.log(\"No gif link given\");\n      return\n    }\n    console.log(\"Gif link:\", inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider)\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF sucessfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error);\n    }\n  }\n\n  const addVote = async (gifLink) => {\n    console.log(\"Upvoting\", gifLink);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.updateGif(gifLink, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"GIF sucessfully upvoted\");\n      await getGifList();\n    } catch (error) {\n      console.log(\"error upvoting GIF:\", error)\n    }\n  }\n\n  const renderNotConnectedContainer = () => {\n    return (\n      <button\n        className=\"cta-button connect-wallet-button\"\n        onClick={connectWallet}\n      >\n        Connect to Wallet\n      </button>\n    )\n  }\n\n  const handlePopUp = (userAddress) => {\n    if (userAddress === getProvider().wallet.publicKey.toString()) {\n      console.log(\"Cannot Tip Youself! ðŸ¤£\");\n    } else {\n      setPayPopUp(!payPopUp);\n      setRecievingAddress(userAddress);\n    }\n  }\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-program\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } \n    // Account exists\n    return (\n      <div className=\"connected-container\">\n        <form\n          onSubmit={(event) => {\n            event.preventDefault();\n            sendGif();\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        {payPopUp ? \n          <PayPopUp \n            userAddress={recievingAddress} \n            toggle={handlePopUp} \n            getProvider={getProvider}\n          /> \n        : null}\n        <div className=\"gif-grid\">\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img alt=\"gif-link\" src={item.gifLink} />\n              <p>{item.userAddress.toString()}</p>\n              <IconContext.Provider value={{ className: \"react-icons-heart\" }}>\n                <div className=\"update-system\">\n                  <p>{item.votes}</p>\n                  <FcLike className=\"upvote\" onClick={() => addVote(item.gifLink)}>Upvote</FcLike>\n                  <FaMoneyBillWave className=\"send-tip\" onClick={() => handlePopUp(item.userAddress.toString())}>Send a Tip</FaMoneyBillWave>\n                </div>\n              </IconContext.Provider>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n  /*\n   * When the component first loads, check if a Phantom Wallet is connected\n  */\n  useEffect(() => {\n    window.addEventListener('load', async(event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n  \n  const getGifList = useCallback(async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n\n      setGifList(account.gifList)\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error);\n      setGifList(null)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching Gift list...');\n      getGifList();\n    }\n\n  }, [walletAddress, getGifList])\n\n\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Naruto GIF Portal</p>\n          <p className=\"sub-text\">View your GIF collection in the metaverse</p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}